package problems

import kotlin.math.*

/**
 * The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
 *
 *    1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
 *
 *    Let us list the factors of the first seven triangle numbers:
 *
 *    1: 1
 *    3: 1,3
 *    6: 1,2,3,6
 *    10: 1,2,5,10
 *    15: 1,3,5,15
 *    21: 1,3,7,21
 *    28: 1,2,4,7,14,28
 *    We can see that 28 is the first triangle number to have over five divisors.
 *
 *    What is the value of the first triangle number to have over five hundred divisors?
 * */
fun main() {
    val mainNumber = 500
    println(getResultTN(mainNumber))
}

fun getResultTN(inNumber: Int): Long {
    var i = 0L
    var tNum = 0L
    var div = 0
    while (div < inNumber) {
        i++
        tNum += i
        div = getDivisorsCount(tNum)
    }
    return tNum
}

fun getDivisorsCount(i: Long): Int {
    var count = 0
    for (j in 1..sqrt(i * 1.0).toLong()) {
        if (i % j == 0L) {
            if (i / j == j) count++
            else count += 2
        }
    }
    return count
}

